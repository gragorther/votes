generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model person {
  id                                                                    Int                        @id(map: "person__pkey") @default(autoincrement())
  name                                                                  String                     @db.VarChar(255)
  display_name                                                          String?                    @db.VarChar(255)
  avatar                                                                String?
  banned                                                                Boolean                    @default(false)
  published                                                             DateTime                   @default(now()) @db.Timestamptz(6)
  updated                                                               DateTime?                  @db.Timestamptz(6)
  actor_id                                                              String                     @unique(map: "idx_person_actor_id") @default(dbgenerated("generate_unique_changeme()")) @db.VarChar(255)
  bio                                                                   String?
  local                                                                 Boolean                    @default(true)
  private_key                                                           String?
  public_key                                                            String
  last_refreshed_at                                                     DateTime                   @default(now()) @db.Timestamptz(6)
  banner                                                                String?
  deleted                                                               Boolean                    @default(false)
  inbox_url                                                             String                     @default(dbgenerated("generate_unique_changeme()")) @db.VarChar(255)
  shared_inbox_url                                                      String?                    @db.VarChar(255)
  matrix_user_id                                                        String?
  bot_account                                                           Boolean                    @default(false)
  ban_expires                                                           DateTime?                  @db.Timestamptz(6)
  instance_id                                                           Int
  admin_purge_comment                                                   admin_purge_comment[]
  admin_purge_community                                                 admin_purge_community[]
  admin_purge_person                                                    admin_purge_person[]
  admin_purge_post                                                      admin_purge_post[]
  comment                                                               comment[]
  comment_like                                                          comment_like[]
  comment_reply                                                         comment_reply[]
  comment_report_comment_report_creator_idToperson                      comment_report[]           @relation("comment_report_creator_idToperson")
  comment_report_comment_report_resolver_idToperson                     comment_report[]           @relation("comment_report_resolver_idToperson")
  comment_saved                                                         comment_saved[]
  community_block                                                       community_block[]
  community_follower                                                    community_follower[]
  community_moderator                                                   community_moderator[]
  community_person_ban                                                  community_person_ban[]
  instance_block                                                        instance_block[]
  local_user                                                            local_user?
  mod_add_mod_add_mod_person_idToperson                                 mod_add[]                  @relation("mod_add_mod_person_idToperson")
  mod_add_mod_add_other_person_idToperson                               mod_add[]                  @relation("mod_add_other_person_idToperson")
  mod_add_community_mod_add_community_mod_person_idToperson             mod_add_community[]        @relation("mod_add_community_mod_person_idToperson")
  mod_add_community_mod_add_community_other_person_idToperson           mod_add_community[]        @relation("mod_add_community_other_person_idToperson")
  mod_ban_mod_ban_mod_person_idToperson                                 mod_ban[]                  @relation("mod_ban_mod_person_idToperson")
  mod_ban_mod_ban_other_person_idToperson                               mod_ban[]                  @relation("mod_ban_other_person_idToperson")
  mod_ban_from_community_mod_ban_from_community_mod_person_idToperson   mod_ban_from_community[]   @relation("mod_ban_from_community_mod_person_idToperson")
  mod_ban_from_community_mod_ban_from_community_other_person_idToperson mod_ban_from_community[]   @relation("mod_ban_from_community_other_person_idToperson")
  mod_feature_post                                                      mod_feature_post[]
  mod_hide_community                                                    mod_hide_community[]
  mod_lock_post                                                         mod_lock_post[]
  mod_remove_comment                                                    mod_remove_comment[]
  mod_remove_community                                                  mod_remove_community[]
  mod_remove_post                                                       mod_remove_post[]
  mod_transfer_community_mod_transfer_community_mod_person_idToperson   mod_transfer_community[]   @relation("mod_transfer_community_mod_person_idToperson")
  mod_transfer_community_mod_transfer_community_other_person_idToperson mod_transfer_community[]   @relation("mod_transfer_community_other_person_idToperson")
  instance                                                              instance                   @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  person_aggregates                                                     person_aggregates?
  person_ban                                                            person_ban?
  person_block_person_block_person_idToperson                           person_block[]             @relation("person_block_person_idToperson")
  person_block_person_block_target_idToperson                           person_block[]             @relation("person_block_target_idToperson")
  person_follower_person_follower_follower_idToperson                   person_follower[]          @relation("person_follower_follower_idToperson")
  person_follower_person_follower_person_idToperson                     person_follower[]          @relation("person_follower_person_idToperson")
  person_mention                                                        person_mention[]
  person_post_aggregates                                                person_post_aggregates[]
  post                                                                  post[]
  post_aggregates                                                       post_aggregates[]
  post_hide                                                             post_hide[]
  post_like                                                             post_like[]
  post_read                                                             post_read[]
  post_report_post_report_creator_idToperson                            post_report[]              @relation("post_report_creator_idToperson")
  post_report_post_report_resolver_idToperson                           post_report[]              @relation("post_report_resolver_idToperson")
  post_saved                                                            post_saved[]
  private_message_private_message_creator_idToperson                    private_message[]          @relation("private_message_creator_idToperson")
  private_message_private_message_recipient_idToperson                  private_message[]          @relation("private_message_recipient_idToperson")
  private_message_report_private_message_report_creator_idToperson      private_message_report[]   @relation("private_message_report_creator_idToperson")
  private_message_report_private_message_report_resolver_idToperson     private_message_report[]   @relation("private_message_report_resolver_idToperson")
  registration_application                                              registration_application[]

  @@index([local(sort: Desc), instance_id], map: "idx_person_local_instance")
  @@index([published(sort: Desc)], map: "idx_person_published")
  @@index([name(ops: raw("gin_trgm_ops")), display_name(ops: raw("gin_trgm_ops"))], map: "idx_person_trigram", type: Gin)
}

model post {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(200)
  url                    String?                  @db.VarChar(2000)
  body                   String?
  creator_id             Int
  community_id           Int
  removed                Boolean                  @default(false)
  locked                 Boolean                  @default(false)
  published              DateTime                 @default(now()) @db.Timestamptz(6)
  updated                DateTime?                @db.Timestamptz(6)
  deleted                Boolean                  @default(false)
  nsfw                   Boolean                  @default(false)
  embed_title            String?
  embed_description      String?
  thumbnail_url          String?
  ap_id                  String                   @unique(map: "idx_post_ap_id") @db.VarChar(255)
  local                  Boolean                  @default(true)
  embed_video_url        String?
  language_id            Int                      @default(0)
  featured_community     Boolean                  @default(false)
  featured_local         Boolean                  @default(false)
  url_content_type       String?
  alt_text               String?
  admin_purge_comment    admin_purge_comment[]
  comment                comment[]
  comment_like           comment_like[]
  mod_feature_post       mod_feature_post[]
  mod_lock_post          mod_lock_post[]
  mod_remove_post        mod_remove_post[]
  person_post_aggregates person_post_aggregates[]
  community              community                @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person                 person                   @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  language               language                 @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_aggregates        post_aggregates?
  post_hide              post_hide[]
  post_like              post_like[]
  post_read              post_read[]
  post_report            post_report[]
  post_saved             post_saved[]

  @@index([community_id], map: "idx_post_community")
  @@index([creator_id], map: "idx_post_creator")
  @@index([language_id], map: "idx_post_language")
  @@index([name(ops: raw("gin_trgm_ops")), body(ops: raw("gin_trgm_ops")), alt_text(ops: raw("gin_trgm_ops"))], map: "idx_post_trigram", type: Gin)
  @@index([url], map: "idx_post_url")
}

model comment {
  id                 Int                  @id @default(autoincrement())
  creator_id         Int
  post_id            Int
  content            String
  removed            Boolean              @default(false)
  published          DateTime             @default(now()) @db.Timestamptz(6)
  updated            DateTime?            @db.Timestamptz(6)
  deleted            Boolean              @default(false)
  ap_id              String               @unique(map: "idx_comment_ap_id") @db.VarChar(255)
  local              Boolean              @default(true)
  path               Unsupported("ltree") @default(dbgenerated("'0'::ltree"))
  distinguished      Boolean              @default(false)
  language_id        Int                  @default(0)
  person             person               @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  language           language             @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post               post                 @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment_aggregates comment_aggregates?
  comment_like       comment_like[]
  comment_reply      comment_reply[]
  comment_report     comment_report[]
  comment_saved      comment_saved[]
  mod_remove_comment mod_remove_comment[]
  person_mention     person_mention[]

  @@index([content(ops: raw("gin_trgm_ops"))], map: "idx_comment_content_trigram", type: Gin)
  @@index([creator_id], map: "idx_comment_creator")
  @@index([language_id], map: "idx_comment_language")
  @@index([post_id], map: "idx_comment_post")
  @@index([published(sort: Desc)], map: "idx_comment_published")
  @@index([path], map: "idx_path_gist", type: Gist)
}

model post_like {
  post_id   Int
  person_id Int
  score     Int      @db.SmallInt
  published DateTime @default(now()) @db.Timestamptz(6)
  person    person   @relation(fields: [person_id], references: [id], onDelete: Cascade)
  post      post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([person_id, post_id])
  @@index([post_id], map: "idx_post_like_post")
}

model comment_like {
  person_id  Int
  comment_id Int
  post_id    Int
  score      Int      @db.SmallInt
  published  DateTime @default(now()) @db.Timestamptz(6)
  comment    comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  person     person   @relation(fields: [person_id], references: [id], onDelete: Cascade)
  post       post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([person_id, comment_id])
  @@index([comment_id], map: "idx_comment_like_comment")
  @@index([post_id], map: "idx_comment_like_post")
}

model instance {
  id                     Int                     @id @default(autoincrement())
  domain                 String                  @unique @db.VarChar(255)
  published              DateTime                @default(now()) @db.Timestamptz(6)
  updated                DateTime?               @db.Timestamptz(6)
  software               String?                 @db.VarChar(255)
  version                String?                 @db.VarChar(255)
  community              community[]
  federation_allowlist   federation_allowlist?
  federation_blocklist   federation_blocklist?
  federation_queue_state federation_queue_state?
  instance_block         instance_block[]
  person                 person[]
  post_aggregates        post_aggregates[]
  site                   site?
}

model diesel_schema_migrations {
  version String   @id @db.VarChar(50)
  run_on  DateTime @default(now()) @db.Timestamp(6)

  @@map("__diesel_schema_migrations")
}

model admin_purge_comment {
  id              Int      @id @default(autoincrement())
  admin_person_id Int
  post_id         Int
  reason          String?
  when_           DateTime @default(now()) @db.Timestamptz(6)
  person          person   @relation(fields: [admin_person_id], references: [id], onDelete: Cascade)
  post            post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model admin_purge_community {
  id              Int      @id @default(autoincrement())
  admin_person_id Int
  reason          String?
  when_           DateTime @default(now()) @db.Timestamptz(6)
  person          person   @relation(fields: [admin_person_id], references: [id], onDelete: Cascade)
}

model admin_purge_person {
  id              Int      @id @default(autoincrement())
  admin_person_id Int
  reason          String?
  when_           DateTime @default(now()) @db.Timestamptz(6)
  person          person   @relation(fields: [admin_person_id], references: [id], onDelete: Cascade)
}

model admin_purge_post {
  id              Int       @id @default(autoincrement())
  admin_person_id Int
  community_id    Int
  reason          String?
  when_           DateTime  @default(now()) @db.Timestamptz(6)
  person          person    @relation(fields: [admin_person_id], references: [id], onDelete: Cascade)
  community       community @relation(fields: [community_id], references: [id], onDelete: Cascade)
}

model captcha_answer {
  uuid      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  answer    String
  published DateTime @default(now()) @db.Timestamptz(6)
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model comment_aggregates {
  comment_id       Int      @id
  score            BigInt   @default(0)
  upvotes          BigInt   @default(0)
  downvotes        BigInt   @default(0)
  published        DateTime @default(now()) @db.Timestamptz(6)
  child_count      Int      @default(0)
  hot_rank         Float    @default(0.0001)
  controversy_rank Float    @default(0)
  comment          comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@index([controversy_rank(sort: Desc)], map: "idx_comment_aggregates_controversy")
  @@index([hot_rank(sort: Desc), score(sort: Desc)], map: "idx_comment_aggregates_hot")
  @@index([published(sort: Desc)], map: "idx_comment_aggregates_published")
  @@index([score(sort: Desc)], map: "idx_comment_aggregates_score")
}

model comment_reply {
  id           Int      @id @default(autoincrement())
  recipient_id Int
  comment_id   Int
  read         Boolean  @default(false)
  published    DateTime @default(now()) @db.Timestamptz(6)
  comment      comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  person       person   @relation(fields: [recipient_id], references: [id], onDelete: Cascade)

  @@unique([recipient_id, comment_id])
  @@index([comment_id], map: "idx_comment_reply_comment")
  @@index([published(sort: Desc)], map: "idx_comment_reply_published")
  @@index([recipient_id], map: "idx_comment_reply_recipient")
}

model comment_report {
  id                                        Int       @id @default(autoincrement())
  creator_id                                Int
  comment_id                                Int
  original_comment_text                     String
  reason                                    String
  resolved                                  Boolean   @default(false)
  resolver_id                               Int?
  published                                 DateTime  @default(now()) @db.Timestamptz(6)
  updated                                   DateTime? @db.Timestamptz(6)
  comment                                   comment   @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  person_comment_report_creator_idToperson  person    @relation("comment_report_creator_idToperson", fields: [creator_id], references: [id], onDelete: Cascade)
  person_comment_report_resolver_idToperson person?   @relation("comment_report_resolver_idToperson", fields: [resolver_id], references: [id], onDelete: Cascade)

  @@unique([comment_id, creator_id])
  @@index([published(sort: Desc)], map: "idx_comment_report_published")
}

model comment_saved {
  comment_id Int
  person_id  Int
  published  DateTime @default(now()) @db.Timestamptz(6)
  comment    comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  person     person   @relation(fields: [person_id], references: [id], onDelete: Cascade)

  @@id([person_id, comment_id])
  @@index([comment_id], map: "idx_comment_saved_comment")
  @@index([person_id], map: "idx_comment_saved_person")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model community {
  id                         Int                      @id @default(autoincrement())
  name                       String                   @db.VarChar(255)
  title                      String                   @db.VarChar(255)
  description                String?
  removed                    Boolean                  @default(false)
  published                  DateTime                 @default(now()) @db.Timestamptz(6)
  updated                    DateTime?                @db.Timestamptz(6)
  deleted                    Boolean                  @default(false)
  nsfw                       Boolean                  @default(false)
  actor_id                   String                   @unique(map: "idx_community_actor_id") @default(dbgenerated("generate_unique_changeme()")) @db.VarChar(255)
  local                      Boolean                  @default(true)
  private_key                String?
  public_key                 String
  last_refreshed_at          DateTime                 @default(now()) @db.Timestamptz(6)
  icon                       String?
  banner                     String?
  followers_url              String?                  @unique(map: "idx_community_followers_url") @default(dbgenerated("generate_unique_changeme()")) @db.VarChar(255)
  inbox_url                  String                   @default(dbgenerated("generate_unique_changeme()")) @db.VarChar(255)
  shared_inbox_url           String?                  @db.VarChar(255)
  hidden                     Boolean                  @default(false)
  posting_restricted_to_mods Boolean                  @default(false)
  instance_id                Int
  moderators_url             String?                  @unique @db.VarChar(255)
  featured_url               String?                  @unique @db.VarChar(255)
  visibility                 community_visibility     @default(Public)
  admin_purge_post           admin_purge_post[]
  instance                   instance                 @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  community_aggregates       community_aggregates?
  community_block            community_block[]
  community_follower         community_follower[]
  community_language         community_language[]
  community_moderator        community_moderator[]
  community_person_ban       community_person_ban[]
  mod_add_community          mod_add_community[]
  mod_ban_from_community     mod_ban_from_community[]
  mod_hide_community         mod_hide_community[]
  mod_remove_community       mod_remove_community[]
  mod_transfer_community     mod_transfer_community[]
  post                       post[]
  post_aggregates            post_aggregates[]

  @@index([published(sort: Desc)], map: "idx_community_published")
  @@index([title], map: "idx_community_title")
  @@index([name(ops: raw("gin_trgm_ops")), title(ops: raw("gin_trgm_ops"))], map: "idx_community_trigram", type: Gin)
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model community_aggregates {
  community_id           Int       @id
  subscribers            BigInt    @default(0)
  posts                  BigInt    @default(0)
  comments               BigInt    @default(0)
  published              DateTime  @default(now()) @db.Timestamptz(6)
  users_active_day       BigInt    @default(0)
  users_active_week      BigInt    @default(0)
  users_active_month     BigInt    @default(0)
  users_active_half_year BigInt    @default(0)
  hot_rank               Float     @default(0.0001)
  subscribers_local      BigInt    @default(0)
  community              community @relation(fields: [community_id], references: [id], onDelete: Cascade)

  @@index([hot_rank(sort: Desc)], map: "idx_community_aggregates_hot")
  @@index([published(sort: Desc)], map: "idx_community_aggregates_published")
  @@index([subscribers(sort: Desc)], map: "idx_community_aggregates_subscribers")
  @@index([users_active_month(sort: Desc)], map: "idx_community_aggregates_users_active_month")
}

model community_block {
  person_id    Int
  community_id Int
  published    DateTime  @default(now()) @db.Timestamptz(6)
  community    community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person       person    @relation(fields: [person_id], references: [id], onDelete: Cascade)

  @@id([person_id, community_id])
  @@index([community_id], map: "idx_community_block_community")
}

model community_follower {
  community_id Int
  person_id    Int
  published    DateTime  @default(now()) @db.Timestamptz(6)
  pending      Boolean   @default(false)
  community    community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person       person    @relation(fields: [person_id], references: [id], onDelete: Cascade)

  @@id([person_id, community_id])
  @@index([community_id], map: "idx_community_follower_community")
  @@index([published], map: "idx_community_follower_published")
}

model community_language {
  community_id Int
  language_id  Int
  community    community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  language     language  @relation(fields: [language_id], references: [id], onDelete: Cascade)

  @@id([community_id, language_id])
}

model community_moderator {
  community_id Int
  person_id    Int
  published    DateTime  @default(now()) @db.Timestamptz(6)
  community    community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person       person    @relation(fields: [person_id], references: [id], onDelete: Cascade)

  @@id([person_id, community_id])
  @@index([community_id], map: "idx_community_moderator_community")
  @@index([published], map: "idx_community_moderator_published")
}

model community_person_ban {
  community_id Int
  person_id    Int
  published    DateTime  @default(now()) @db.Timestamptz(6)
  expires      DateTime? @db.Timestamptz(6)
  community    community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person       person    @relation(fields: [person_id], references: [id], onDelete: Cascade)

  @@id([person_id, community_id])
}

model custom_emoji {
  id                   Int                    @id @default(autoincrement())
  local_site_id        Int
  shortcode            String                 @unique @db.VarChar(128)
  image_url            String                 @unique
  alt_text             String
  category             String
  published            DateTime               @default(now()) @db.Timestamptz(6)
  updated              DateTime?              @db.Timestamptz(6)
  local_site           local_site             @relation(fields: [local_site_id], references: [id], onDelete: Cascade)
  custom_emoji_keyword custom_emoji_keyword[]

  @@index([id, category], map: "idx_custom_emoji_category")
}

model custom_emoji_keyword {
  custom_emoji_id Int
  keyword         String       @db.VarChar(128)
  custom_emoji    custom_emoji @relation(fields: [custom_emoji_id], references: [id], onDelete: Cascade)

  @@id([custom_emoji_id, keyword])
}

model email_verification {
  id                 Int        @id @default(autoincrement())
  local_user_id      Int
  email              String
  verification_token String
  published          DateTime   @default(now()) @db.Timestamptz(6)
  local_user         local_user @relation(fields: [local_user_id], references: [id], onDelete: Cascade)
}

model federation_allowlist {
  instance_id Int       @id
  published   DateTime  @default(now()) @db.Timestamptz(6)
  updated     DateTime? @db.Timestamptz(6)
  instance    instance  @relation(fields: [instance_id], references: [id], onDelete: Cascade)
}

model federation_blocklist {
  instance_id Int       @id
  published   DateTime  @default(now()) @db.Timestamptz(6)
  updated     DateTime? @db.Timestamptz(6)
  instance    instance  @relation(fields: [instance_id], references: [id], onDelete: Cascade)
}

model federation_queue_state {
  instance_id                    Int       @id
  last_successful_id             BigInt?
  fail_count                     Int
  last_retry                     DateTime? @db.Timestamptz(6)
  last_successful_published_time DateTime? @db.Timestamptz(6)
  instance                       instance  @relation(fields: [instance_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model image_details {
  link         String @id
  width        Int
  height       Int
  content_type String
}

model instance_block {
  person_id   Int
  instance_id Int
  published   DateTime @default(now()) @db.Timestamptz(6)
  instance    instance @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  person      person   @relation(fields: [person_id], references: [id], onDelete: Cascade)

  @@id([person_id, instance_id])
}

model language {
  id                  Int                   @id @default(autoincrement())
  code                String                @db.VarChar(3)
  name                String
  comment             comment[]
  community_language  community_language[]
  local_user_language local_user_language[]
  post                post[]
  site_language       site_language[]
}

model local_image {
  local_user_id       Int?
  pictrs_alias        String      @id(map: "image_upload_pkey")
  pictrs_delete_token String
  published           DateTime    @default(now()) @db.Timestamptz(6)
  local_user          local_user? @relation(fields: [local_user_id], references: [id], onDelete: Cascade, map: "image_upload_local_user_id_fkey")

  @@index([local_user_id], map: "idx_image_upload_local_user_id")
}

model local_site {
  id                            Int                    @id @default(autoincrement())
  site_id                       Int                    @unique
  site_setup                    Boolean                @default(false)
  enable_downvotes              Boolean                @default(true)
  enable_nsfw                   Boolean                @default(true)
  community_creation_admin_only Boolean                @default(false)
  require_email_verification    Boolean                @default(false)
  application_question          String?                @default("to verify that you are human, please explain why you want to create an account on this site")
  private_instance              Boolean                @default(false)
  default_theme                 String                 @default("browser")
  default_post_listing_type     listing_type_enum      @default(Local)
  legal_information             String?
  hide_modlog_mod_names         Boolean                @default(true)
  application_email_admins      Boolean                @default(false)
  slur_filter_regex             String?
  actor_name_max_length         Int                    @default(20)
  federation_enabled            Boolean                @default(true)
  captcha_enabled               Boolean                @default(false)
  captcha_difficulty            String                 @default("medium") @db.VarChar(255)
  published                     DateTime               @default(now()) @db.Timestamptz(6)
  updated                       DateTime?              @db.Timestamptz(6)
  registration_mode             registration_mode_enum @default(RequireApplication)
  reports_email_admins          Boolean                @default(false)
  federation_signed_fetch       Boolean                @default(false)
  default_post_listing_mode     post_listing_mode_enum @default(List)
  default_sort_type             sort_type_enum         @default(Active)
  custom_emoji                  custom_emoji[]
  site                          site                   @relation(fields: [site_id], references: [id], onDelete: Cascade)
  local_site_rate_limit         local_site_rate_limit?
  tagline                       tagline[]
}

model local_site_rate_limit {
  local_site_id                   Int        @id
  message                         Int        @default(180)
  message_per_second              Int        @default(60)
  post                            Int        @default(6)
  post_per_second                 Int        @default(600)
  register                        Int        @default(10)
  register_per_second             Int        @default(3600)
  image                           Int        @default(6)
  image_per_second                Int        @default(3600)
  comment                         Int        @default(6)
  comment_per_second              Int        @default(600)
  search                          Int        @default(60)
  search_per_second               Int        @default(600)
  published                       DateTime   @default(now()) @db.Timestamptz(6)
  updated                         DateTime?  @db.Timestamptz(6)
  import_user_settings            Int        @default(1)
  import_user_settings_per_second Int        @default(86400)
  local_site                      local_site @relation(fields: [local_site_id], references: [id], onDelete: Cascade)
}

model local_site_url_blocklist {
  id        Int       @id @default(autoincrement())
  url       String    @unique
  published DateTime  @default(now()) @db.Timestamptz(6)
  updated   DateTime? @db.Timestamptz(6)
}

model local_user {
  id                           Int                           @id @default(autoincrement())
  person_id                    Int                           @unique
  password_encrypted           String
  email                        String?                       @unique
  show_nsfw                    Boolean                       @default(false)
  theme                        String                        @default("browser")
  default_sort_type            sort_type_enum                @default(Active)
  default_listing_type         listing_type_enum             @default(Local)
  interface_language           String                        @default("browser") @db.VarChar(20)
  show_avatars                 Boolean                       @default(true)
  send_notifications_to_email  Boolean                       @default(false)
  show_scores                  Boolean                       @default(true)
  show_bot_accounts            Boolean                       @default(true)
  show_read_posts              Boolean                       @default(true)
  email_verified               Boolean                       @default(false)
  accepted_application         Boolean                       @default(false)
  totp_2fa_secret              String?
  open_links_in_new_tab        Boolean                       @default(false)
  blur_nsfw                    Boolean                       @default(true)
  auto_expand                  Boolean                       @default(false)
  infinite_scroll_enabled      Boolean                       @default(false)
  admin                        Boolean                       @default(false)
  post_listing_mode            post_listing_mode_enum        @default(List)
  totp_2fa_enabled             Boolean                       @default(false)
  enable_keyboard_navigation   Boolean                       @default(false)
  enable_animated_images       Boolean                       @default(true)
  collapse_bot_comments        Boolean                       @default(false)
  last_donation_notification   DateTime                      @default(dbgenerated("(now() - (random() * '1 year'::interval))")) @db.Timestamptz(6)
  email_verification           email_verification[]
  local_image                  local_image[]
  person                       person                        @relation(fields: [person_id], references: [id], onDelete: Cascade)
  local_user_language          local_user_language[]
  local_user_vote_display_mode local_user_vote_display_mode?
  login_token                  login_token[]
  password_reset_request       password_reset_request[]
  registration_application     registration_application?
}

model local_user_language {
  local_user_id Int
  language_id   Int
  language      language   @relation(fields: [language_id], references: [id], onDelete: Cascade)
  local_user    local_user @relation(fields: [local_user_id], references: [id], onDelete: Cascade)

  @@id([local_user_id, language_id])
}

model local_user_vote_display_mode {
  local_user_id     Int        @id
  score             Boolean    @default(false)
  upvotes           Boolean    @default(true)
  downvotes         Boolean    @default(true)
  upvote_percentage Boolean    @default(false)
  local_user        local_user @relation(fields: [local_user_id], references: [id], onDelete: Cascade)
}

model login_token {
  token      String     @id
  user_id    Int
  published  DateTime   @default(now()) @db.Timestamptz(6)
  ip         String?
  user_agent String?
  local_user local_user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, token], map: "idx_login_token_user_token")
}

model mod_add {
  id                                     Int      @id @default(autoincrement())
  mod_person_id                          Int
  other_person_id                        Int
  removed                                Boolean  @default(false)
  when_                                  DateTime @default(now()) @db.Timestamptz(6)
  person_mod_add_mod_person_idToperson   person   @relation("mod_add_mod_person_idToperson", fields: [mod_person_id], references: [id], onDelete: Cascade)
  person_mod_add_other_person_idToperson person   @relation("mod_add_other_person_idToperson", fields: [other_person_id], references: [id], onDelete: Cascade)
}

model mod_add_community {
  id                                               Int       @id @default(autoincrement())
  mod_person_id                                    Int
  other_person_id                                  Int
  community_id                                     Int
  removed                                          Boolean   @default(false)
  when_                                            DateTime  @default(now()) @db.Timestamptz(6)
  community                                        community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person_mod_add_community_mod_person_idToperson   person    @relation("mod_add_community_mod_person_idToperson", fields: [mod_person_id], references: [id], onDelete: Cascade)
  person_mod_add_community_other_person_idToperson person    @relation("mod_add_community_other_person_idToperson", fields: [other_person_id], references: [id], onDelete: Cascade)
}

model mod_ban {
  id                                     Int       @id @default(autoincrement())
  mod_person_id                          Int
  other_person_id                        Int
  reason                                 String?
  banned                                 Boolean   @default(true)
  expires                                DateTime? @db.Timestamptz(6)
  when_                                  DateTime  @default(now()) @db.Timestamptz(6)
  person_mod_ban_mod_person_idToperson   person    @relation("mod_ban_mod_person_idToperson", fields: [mod_person_id], references: [id], onDelete: Cascade)
  person_mod_ban_other_person_idToperson person    @relation("mod_ban_other_person_idToperson", fields: [other_person_id], references: [id], onDelete: Cascade)
}

model mod_ban_from_community {
  id                                                    Int       @id @default(autoincrement())
  mod_person_id                                         Int
  other_person_id                                       Int
  community_id                                          Int
  reason                                                String?
  banned                                                Boolean   @default(true)
  expires                                               DateTime? @db.Timestamptz(6)
  when_                                                 DateTime  @default(now()) @db.Timestamptz(6)
  community                                             community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person_mod_ban_from_community_mod_person_idToperson   person    @relation("mod_ban_from_community_mod_person_idToperson", fields: [mod_person_id], references: [id], onDelete: Cascade)
  person_mod_ban_from_community_other_person_idToperson person    @relation("mod_ban_from_community_other_person_idToperson", fields: [other_person_id], references: [id], onDelete: Cascade)
}

model mod_feature_post {
  id                    Int      @id(map: "mod_sticky_post_pkey") @default(autoincrement())
  mod_person_id         Int
  post_id               Int
  featured              Boolean  @default(true)
  when_                 DateTime @default(now()) @db.Timestamptz(6)
  is_featured_community Boolean  @default(true)
  person                person   @relation(fields: [mod_person_id], references: [id], onDelete: Cascade, map: "mod_sticky_post_mod_person_id_fkey")
  post                  post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "mod_sticky_post_post_id_fkey")
}

model mod_hide_community {
  id            Int       @id @default(autoincrement())
  community_id  Int
  mod_person_id Int
  when_         DateTime  @default(now()) @db.Timestamptz(6)
  reason        String?
  hidden        Boolean   @default(false)
  community     community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person        person    @relation(fields: [mod_person_id], references: [id], onDelete: Cascade)
}

model mod_lock_post {
  id            Int      @id @default(autoincrement())
  mod_person_id Int
  post_id       Int
  locked        Boolean  @default(true)
  when_         DateTime @default(now()) @db.Timestamptz(6)
  person        person   @relation(fields: [mod_person_id], references: [id], onDelete: Cascade)
  post          post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model mod_remove_comment {
  id            Int      @id @default(autoincrement())
  mod_person_id Int
  comment_id    Int
  reason        String?
  removed       Boolean  @default(true)
  when_         DateTime @default(now()) @db.Timestamptz(6)
  comment       comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  person        person   @relation(fields: [mod_person_id], references: [id], onDelete: Cascade)
}

model mod_remove_community {
  id            Int       @id @default(autoincrement())
  mod_person_id Int
  community_id  Int
  reason        String?
  removed       Boolean   @default(true)
  when_         DateTime  @default(now()) @db.Timestamptz(6)
  community     community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person        person    @relation(fields: [mod_person_id], references: [id], onDelete: Cascade)
}

model mod_remove_post {
  id            Int      @id @default(autoincrement())
  mod_person_id Int
  post_id       Int
  reason        String?
  removed       Boolean  @default(true)
  when_         DateTime @default(now()) @db.Timestamptz(6)
  person        person   @relation(fields: [mod_person_id], references: [id], onDelete: Cascade)
  post          post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model mod_transfer_community {
  id                                                    Int       @id @default(autoincrement())
  mod_person_id                                         Int
  other_person_id                                       Int
  community_id                                          Int
  when_                                                 DateTime  @default(now()) @db.Timestamptz(6)
  community                                             community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person_mod_transfer_community_mod_person_idToperson   person    @relation("mod_transfer_community_mod_person_idToperson", fields: [mod_person_id], references: [id], onDelete: Cascade)
  person_mod_transfer_community_other_person_idToperson person    @relation("mod_transfer_community_other_person_idToperson", fields: [other_person_id], references: [id], onDelete: Cascade)
}

model password_reset_request {
  id            Int        @id @default(autoincrement())
  token         String
  published     DateTime   @default(now()) @db.Timestamptz(6)
  local_user_id Int
  local_user    local_user @relation(fields: [local_user_id], references: [id], onDelete: Cascade)
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model person_aggregates {
  person_id     Int    @id
  post_count    BigInt @default(0)
  post_score    BigInt @default(0)
  comment_count BigInt @default(0)
  comment_score BigInt @default(0)
  person        person @relation(fields: [person_id], references: [id], onDelete: Cascade)

  @@index([comment_score(sort: Desc)], map: "idx_person_aggregates_comment_score")
  @@index([person_id], map: "idx_person_aggregates_person")
}

model person_ban {
  person_id Int      @id
  published DateTime @default(now()) @db.Timestamptz(6)
  person    person   @relation(fields: [person_id], references: [id], onDelete: Cascade)
}

model person_block {
  person_id                             Int
  target_id                             Int
  published                             DateTime @default(now()) @db.Timestamptz(6)
  person_person_block_person_idToperson person   @relation("person_block_person_idToperson", fields: [person_id], references: [id], onDelete: Cascade)
  person_person_block_target_idToperson person   @relation("person_block_target_idToperson", fields: [target_id], references: [id], onDelete: Cascade)

  @@id([person_id, target_id])
  @@index([person_id], map: "idx_person_block_person")
  @@index([target_id], map: "idx_person_block_target")
}

model person_follower {
  person_id                                  Int
  follower_id                                Int
  published                                  DateTime @default(now()) @db.Timestamptz(6)
  pending                                    Boolean
  person_person_follower_follower_idToperson person   @relation("person_follower_follower_idToperson", fields: [follower_id], references: [id], onDelete: Cascade)
  person_person_follower_person_idToperson   person   @relation("person_follower_person_idToperson", fields: [person_id], references: [id], onDelete: Cascade)

  @@id([follower_id, person_id])
}

model person_mention {
  id           Int      @id @default(autoincrement())
  recipient_id Int
  comment_id   Int
  read         Boolean  @default(false)
  published    DateTime @default(now()) @db.Timestamptz(6)
  comment      comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  person       person   @relation(fields: [recipient_id], references: [id], onDelete: Cascade)

  @@unique([recipient_id, comment_id])
}

model person_post_aggregates {
  person_id     Int
  post_id       Int
  read_comments BigInt   @default(0)
  published     DateTime @default(now()) @db.Timestamptz(6)
  person        person   @relation(fields: [person_id], references: [id], onDelete: Cascade)
  post          post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([person_id, post_id])
  @@index([person_id], map: "idx_person_post_aggregates_person")
  @@index([post_id], map: "idx_person_post_aggregates_post")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model post_aggregates {
  post_id                   Int       @id
  comments                  BigInt    @default(0)
  score                     BigInt    @default(0)
  upvotes                   BigInt    @default(0)
  downvotes                 BigInt    @default(0)
  published                 DateTime  @default(now()) @db.Timestamptz(6)
  newest_comment_time_necro DateTime  @default(now()) @db.Timestamptz(6)
  newest_comment_time       DateTime  @default(now()) @db.Timestamptz(6)
  featured_community        Boolean   @default(false)
  featured_local            Boolean   @default(false)
  hot_rank                  Float     @default(0.0001)
  hot_rank_active           Float     @default(0.0001)
  community_id              Int
  creator_id                Int
  controversy_rank          Float     @default(0)
  instance_id               Int
  scaled_rank               Float     @default(0.0001)
  community                 community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  person                    person    @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  instance                  instance  @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  post                      post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([community_id, featured_local(sort: Desc), hot_rank_active(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_active")
  @@index([community_id, featured_local(sort: Desc), controversy_rank(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_controversy")
  @@index([community_id, featured_local(sort: Desc), hot_rank(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_hot")
  @@index([community_id, featured_local(sort: Desc), comments(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_most_comments")
  @@index([community_id, featured_local(sort: Desc), newest_comment_time(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_newest_comment_time")
  @@index([community_id, featured_local(sort: Desc), newest_comment_time_necro(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_newest_comment_time_necro")
  @@index([community_id, featured_local(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_published")
  @@index([community_id, featured_local(sort: Desc), scaled_rank(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_scaled")
  @@index([community_id, featured_local(sort: Desc), score(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_community_score")
  @@index([community_id, featured_community(sort: Desc), hot_rank_active(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_active")
  @@index([community_id, featured_community(sort: Desc), controversy_rank(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_controversy")
  @@index([community_id, featured_community(sort: Desc), hot_rank(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_hot")
  @@index([community_id, featured_community(sort: Desc), comments(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_most_comments")
  @@index([community_id, featured_community(sort: Desc), newest_comment_time(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_newest_comment_time")
  @@index([community_id, featured_community(sort: Desc), newest_comment_time_necro(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_newest_comment_time_necr")
  @@index([community_id, featured_community(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_published")
  @@index([community_id, featured_community(sort: Desc), scaled_rank(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_scaled")
  @@index([community_id, featured_community(sort: Desc), score(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_community_score")
  @@index([featured_local(sort: Desc), hot_rank_active(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_active")
  @@index([featured_local(sort: Desc), controversy_rank(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_controversy")
  @@index([featured_local(sort: Desc), hot_rank(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_hot")
  @@index([featured_local(sort: Desc), comments(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_most_comments")
  @@index([featured_local(sort: Desc), newest_comment_time(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_newest_comment_time")
  @@index([featured_local(sort: Desc), newest_comment_time_necro(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_newest_comment_time_necro")
  @@index([featured_local(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_published")
  @@index([featured_local(sort: Desc), scaled_rank(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_scaled")
  @@index([featured_local(sort: Desc), score(sort: Desc), published(sort: Desc), post_id(sort: Desc)], map: "idx_post_aggregates_featured_local_score")
  @@index([published(sort: Desc)], map: "idx_post_aggregates_published")
}

model post_hide {
  post_id   Int
  person_id Int
  published DateTime @default(now()) @db.Timestamptz(6)
  person    person   @relation(fields: [person_id], references: [id], onDelete: Cascade)
  post      post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([person_id, post_id])
}

model post_read {
  post_id   Int
  person_id Int
  published DateTime @default(now()) @db.Timestamptz(6)
  person    person   @relation(fields: [person_id], references: [id], onDelete: Cascade)
  post      post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([person_id, post_id])
}

model post_report {
  id                                     Int       @id @default(autoincrement())
  creator_id                             Int
  post_id                                Int
  original_post_name                     String    @db.VarChar(200)
  original_post_url                      String?
  original_post_body                     String?
  reason                                 String
  resolved                               Boolean   @default(false)
  resolver_id                            Int?
  published                              DateTime  @default(now()) @db.Timestamptz(6)
  updated                                DateTime? @db.Timestamptz(6)
  person_post_report_creator_idToperson  person    @relation("post_report_creator_idToperson", fields: [creator_id], references: [id], onDelete: Cascade)
  post                                   post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  person_post_report_resolver_idToperson person?   @relation("post_report_resolver_idToperson", fields: [resolver_id], references: [id], onDelete: Cascade)

  @@unique([post_id, creator_id])
  @@index([published(sort: Desc)], map: "idx_post_report_published")
}

model post_saved {
  post_id   Int
  person_id Int
  published DateTime @default(now()) @db.Timestamptz(6)
  person    person   @relation(fields: [person_id], references: [id], onDelete: Cascade)
  post      post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([person_id, post_id])
}

model private_message {
  id                                          Int                      @id @default(autoincrement())
  creator_id                                  Int
  recipient_id                                Int
  content                                     String
  deleted                                     Boolean                  @default(false)
  read                                        Boolean                  @default(false)
  published                                   DateTime                 @default(now()) @db.Timestamptz(6)
  updated                                     DateTime?                @db.Timestamptz(6)
  ap_id                                       String                   @unique(map: "idx_private_message_ap_id") @db.VarChar(255)
  local                                       Boolean                  @default(true)
  removed                                     Boolean                  @default(false)
  person_private_message_creator_idToperson   person                   @relation("private_message_creator_idToperson", fields: [creator_id], references: [id], onDelete: Cascade)
  person_private_message_recipient_idToperson person                   @relation("private_message_recipient_idToperson", fields: [recipient_id], references: [id], onDelete: Cascade)
  private_message_report                      private_message_report[]
}

model private_message_report {
  id                                                Int             @id @default(autoincrement())
  creator_id                                        Int
  private_message_id                                Int
  original_pm_text                                  String
  reason                                            String
  resolved                                          Boolean         @default(false)
  resolver_id                                       Int?
  published                                         DateTime        @default(now()) @db.Timestamptz(6)
  updated                                           DateTime?       @db.Timestamptz(6)
  person_private_message_report_creator_idToperson  person          @relation("private_message_report_creator_idToperson", fields: [creator_id], references: [id], onDelete: Cascade)
  private_message                                   private_message @relation(fields: [private_message_id], references: [id], onDelete: Cascade)
  person_private_message_report_resolver_idToperson person?         @relation("private_message_report_resolver_idToperson", fields: [resolver_id], references: [id], onDelete: Cascade)

  @@unique([private_message_id, creator_id])
}

model received_activity {
  ap_id     String   @id
  published DateTime @default(now()) @db.Timestamptz(6)
}

model registration_application {
  id            Int        @id @default(autoincrement())
  local_user_id Int        @unique
  answer        String
  admin_id      Int?
  deny_reason   String?
  published     DateTime   @default(now()) @db.Timestamptz(6)
  person        person?    @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  local_user    local_user @relation(fields: [local_user_id], references: [id], onDelete: Cascade)

  @@index([published(sort: Desc)], map: "idx_registration_application_published")
}

model remote_image {
  link      String   @id
  published DateTime @default(now()) @db.Timestamptz(6)
}

model secret {
  id         Int    @id @default(autoincrement())
  jwt_secret String @default(dbgenerated("gen_random_uuid()")) @db.VarChar
}

model sent_activity {
  id                          BigInt          @id @default(autoincrement())
  ap_id                       String          @unique
  data                        Json            @db.Json
  sensitive                   Boolean
  published                   DateTime        @default(now()) @db.Timestamptz(6)
  send_inboxes                String[]
  send_community_followers_of Int?
  send_all_instances          Boolean
  actor_type                  actor_type_enum
  actor_apub_id               String?
}

model site {
  id                Int              @id @default(autoincrement())
  name              String           @db.VarChar(20)
  sidebar           String?
  published         DateTime         @default(now()) @db.Timestamptz(6)
  updated           DateTime?        @db.Timestamptz(6)
  icon              String?
  banner            String?
  description       String?          @db.VarChar(150)
  actor_id          String           @unique @default(dbgenerated("generate_unique_changeme()")) @db.VarChar(255)
  last_refreshed_at DateTime         @default(now()) @db.Timestamptz(6)
  inbox_url         String           @default(dbgenerated("generate_unique_changeme()")) @db.VarChar(255)
  private_key       String?
  public_key        String           @default(dbgenerated("generate_unique_changeme()"))
  instance_id       Int              @unique(map: "idx_site_instance_unique")
  content_warning   String?
  local_site        local_site?
  instance          instance         @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  site_aggregates   site_aggregates?
  site_language     site_language[]
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model site_aggregates {
  site_id                Int    @id
  users                  BigInt @default(1)
  posts                  BigInt @default(0)
  comments               BigInt @default(0)
  communities            BigInt @default(0)
  users_active_day       BigInt @default(0)
  users_active_week      BigInt @default(0)
  users_active_month     BigInt @default(0)
  users_active_half_year BigInt @default(0)
  site                   site   @relation(fields: [site_id], references: [id], onDelete: Cascade)
}

model site_language {
  site_id     Int
  language_id Int
  language    language @relation(fields: [language_id], references: [id], onDelete: Cascade)
  site        site     @relation(fields: [site_id], references: [id], onDelete: Cascade)

  @@id([site_id, language_id])
}

model tagline {
  id            Int        @id @default(autoincrement())
  local_site_id Int
  content       String
  published     DateTime   @default(now()) @db.Timestamptz(6)
  updated       DateTime?  @db.Timestamptz(6)
  local_site    local_site @relation(fields: [local_site_id], references: [id], onDelete: Cascade)
}

enum actor_type_enum {
  site
  community
  person
}

enum community_visibility {
  Public
  LocalOnly
}

enum listing_type_enum {
  All
  Local
  Subscribed
  ModeratorView
}

enum post_listing_mode_enum {
  List
  Card
  SmallCard
}

enum registration_mode_enum {
  Closed
  RequireApplication
  Open
}

enum sort_type_enum {
  Active
  Hot
  New
  Old
  TopDay
  TopWeek
  TopMonth
  TopYear
  TopAll
  MostComments
  NewComments
  TopHour
  TopSixHour
  TopTwelveHour
  TopThreeMonths
  TopSixMonths
  TopNineMonths
  Controversial
  Scaled
}
